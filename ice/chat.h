// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __chat_h__
#define __chat_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/GCObject.h>
#include <Ice/AsyncResult.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Chat
{

class Room;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Chat::Room>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Chat::Room*);

class RoomFactory;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Chat::RoomFactory>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Chat::RoomFactory*);

class User;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Chat::User>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Chat::User*);

class Server;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::Chat::Server>&);
::IceProxy::Ice::Object* upCast(::IceProxy::Chat::Server*);

}

}

namespace Chat
{

class Room;
::Ice::Object* upCast(::Chat::Room*);
typedef ::IceInternal::Handle< ::Chat::Room> RoomPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Chat::Room> RoomPrx;
void __patch(RoomPtr&, const ::Ice::ObjectPtr&);

class RoomFactory;
::Ice::Object* upCast(::Chat::RoomFactory*);
typedef ::IceInternal::Handle< ::Chat::RoomFactory> RoomFactoryPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Chat::RoomFactory> RoomFactoryPrx;
void __patch(RoomFactoryPtr&, const ::Ice::ObjectPtr&);

class User;
::Ice::Object* upCast(::Chat::User*);
typedef ::IceInternal::Handle< ::Chat::User> UserPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Chat::User> UserPrx;
void __patch(UserPtr&, const ::Ice::ObjectPtr&);

class Server;
::Ice::Object* upCast(::Chat::Server*);
typedef ::IceInternal::Handle< ::Chat::Server> ServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Chat::Server> ServerPrx;
void __patch(ServerPtr&, const ::Ice::ObjectPtr&);

}

namespace Chat
{

class UserAlreadyExists : public ::Ice::UserException
{
public:

    UserAlreadyExists() {}
    virtual ~UserAlreadyExists() throw();

    virtual ::std::string ice_name() const;
    virtual UserAlreadyExists* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
};

static UserAlreadyExists __UserAlreadyExists_init;

class NoSuchUserExist : public ::Ice::UserException
{
public:

    NoSuchUserExist() {}
    virtual ~NoSuchUserExist() throw();

    virtual ::std::string ice_name() const;
    virtual NoSuchUserExist* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
};

class WrongPassword : public ::Ice::UserException
{
public:

    WrongPassword() {}
    virtual ~WrongPassword() throw();

    virtual ::std::string ice_name() const;
    virtual WrongPassword* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
};

class NoSuchRoomExist : public ::Ice::UserException
{
public:

    NoSuchRoomExist() {}
    virtual ~NoSuchRoomExist() throw();

    virtual ::std::string ice_name() const;
    virtual NoSuchRoomExist* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
};

class RoomAlreadyExist : public ::Ice::UserException
{
public:

    RoomAlreadyExist() {}
    virtual ~RoomAlreadyExist() throw();

    virtual ::std::string ice_name() const;
    virtual RoomAlreadyExist* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
};

typedef ::std::vector< ::Chat::RoomPrx> RoomList;

typedef ::std::vector< ::Chat::RoomFactoryPrx> RoomFactoryList;

typedef ::std::vector< ::Chat::UserPrx> UserList;

}

namespace Ice
{
template<>
struct StreamableTraits< ::Chat::UserAlreadyExists>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Chat::NoSuchUserExist>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Chat::WrongPassword>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Chat::NoSuchRoomExist>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::Chat::RoomAlreadyExist>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace Chat
{

class Callback_User_SendMessage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_SendMessage_Base> Callback_User_SendMessagePtr;

class Callback_User_SendPrivateMessage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_SendPrivateMessage_Base> Callback_User_SendPrivateMessagePtr;

class Callback_User_getName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_getName_Base> Callback_User_getNamePtr;

class Callback_User_getPassword_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_User_getPassword_Base> Callback_User_getPasswordPtr;

class Callback_Server_CreateRoom_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_CreateRoom_Base> Callback_Server_CreateRoomPtr;

class Callback_Server_getRooms_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_getRooms_Base> Callback_Server_getRoomsPtr;

class Callback_Server_FindRoom_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_FindRoom_Base> Callback_Server_FindRoomPtr;

class Callback_Server_RegisterRoomFactory_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_RegisterRoomFactory_Base> Callback_Server_RegisterRoomFactoryPtr;

class Callback_Server_UnregisterRoomFactory_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_UnregisterRoomFactory_Base> Callback_Server_UnregisterRoomFactoryPtr;

class Callback_Room_getName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Room_getName_Base> Callback_Room_getNamePtr;

class Callback_Room_getUsers_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Room_getUsers_Base> Callback_Room_getUsersPtr;

class Callback_Room_AddUser_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Room_AddUser_Base> Callback_Room_AddUserPtr;

class Callback_Room_ChangePassword_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Room_ChangePassword_Base> Callback_Room_ChangePasswordPtr;

class Callback_Room_SendMessage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Room_SendMessage_Base> Callback_Room_SendMessagePtr;

class Callback_Room_Destroy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Room_Destroy_Base> Callback_Room_DestroyPtr;

class Callback_Room_LeaveRoom_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Room_LeaveRoom_Base> Callback_Room_LeaveRoomPtr;

class Callback_RoomFactory_createRoom_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RoomFactory_createRoom_Base> Callback_RoomFactory_createRoomPtr;

class Callback_RoomFactory_getRooms_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RoomFactory_getRooms_Base> Callback_RoomFactory_getRoomsPtr;

}

namespace IceProxy
{

namespace Chat
{

class User : virtual public ::IceProxy::Ice::Object
{
public:

    void SendMessage(const ::Chat::RoomPrx& __p_where, const ::Chat::UserPrx& __p_who, const ::std::string& __p_message)
    {
        SendMessage(__p_where, __p_who, __p_message, 0);
    }
    void SendMessage(const ::Chat::RoomPrx& __p_where, const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::Ice::Context& __ctx)
    {
        SendMessage(__p_where, __p_who, __p_message, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SendMessage(const ::Chat::RoomPrx& __p_where, const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_SendMessage(__p_where, __p_who, __p_message, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_SendMessage(const ::Chat::RoomPrx& __p_where, const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SendMessage(__p_where, __p_who, __p_message, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SendMessage(const ::Chat::RoomPrx& __p_where, const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_SendMessage(__p_where, __p_who, __p_message, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SendMessage(const ::Chat::RoomPrx& __p_where, const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SendMessage(__p_where, __p_who, __p_message, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_SendMessage(const ::Chat::RoomPrx& __p_where, const ::Chat::UserPrx& __p_who, const ::std::string& __p_message)
    {
        return begin_SendMessage(__p_where, __p_who, __p_message, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendMessage(const ::Chat::RoomPrx& __p_where, const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::Ice::Context& __ctx)
    {
        return begin_SendMessage(__p_where, __p_who, __p_message, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendMessage(const ::Chat::RoomPrx& __p_where, const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendMessage(__p_where, __p_who, __p_message, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendMessage(const ::Chat::RoomPrx& __p_where, const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendMessage(__p_where, __p_who, __p_message, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendMessage(const ::Chat::RoomPrx& __p_where, const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::Chat::Callback_User_SendMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendMessage(__p_where, __p_who, __p_message, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendMessage(const ::Chat::RoomPrx& __p_where, const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::Ice::Context& __ctx, const ::Chat::Callback_User_SendMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendMessage(__p_where, __p_who, __p_message, &__ctx, __del, __cookie);
    }

    void end_SendMessage(const ::Ice::AsyncResultPtr&);
    
private:

    void SendMessage(const ::Chat::RoomPrx&, const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SendMessage(const ::Chat::RoomPrx&, const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void SendPrivateMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message)
    {
        SendPrivateMessage(__p_who, __p_message, 0);
    }
    void SendPrivateMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::Ice::Context& __ctx)
    {
        SendPrivateMessage(__p_who, __p_message, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SendPrivateMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_SendPrivateMessage(__p_who, __p_message, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_SendPrivateMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SendPrivateMessage(__p_who, __p_message, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SendPrivateMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_SendPrivateMessage(__p_who, __p_message, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SendPrivateMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SendPrivateMessage(__p_who, __p_message, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_SendPrivateMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message)
    {
        return begin_SendPrivateMessage(__p_who, __p_message, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendPrivateMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::Ice::Context& __ctx)
    {
        return begin_SendPrivateMessage(__p_who, __p_message, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendPrivateMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendPrivateMessage(__p_who, __p_message, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendPrivateMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendPrivateMessage(__p_who, __p_message, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendPrivateMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::Chat::Callback_User_SendPrivateMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendPrivateMessage(__p_who, __p_message, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendPrivateMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::Ice::Context& __ctx, const ::Chat::Callback_User_SendPrivateMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendPrivateMessage(__p_who, __p_message, &__ctx, __del, __cookie);
    }

    void end_SendPrivateMessage(const ::Ice::AsyncResultPtr&);
    
private:

    void SendPrivateMessage(const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SendPrivateMessage(const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getName()
    {
        return getName(0);
    }
    ::std::string getName(const ::Ice::Context& __ctx)
    {
        return getName(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getName(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getName(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getName()
    {
        return begin_getName(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx)
    {
        return begin_getName(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Chat::Callback_User_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::Chat::Callback_User_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::std::string end_getName(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getName(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getPassword()
    {
        return getPassword(0);
    }
    ::std::string getPassword(const ::Ice::Context& __ctx)
    {
        return getPassword(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPassword(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPassword(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPassword(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPassword(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPassword(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPassword(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPassword(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPassword(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPassword(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPassword()
    {
        return begin_getPassword(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPassword(const ::Ice::Context& __ctx)
    {
        return begin_getPassword(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPassword(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPassword(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPassword(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPassword(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPassword(const ::Chat::Callback_User_getPasswordPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPassword(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPassword(const ::Ice::Context& __ctx, const ::Chat::Callback_User_getPasswordPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPassword(&__ctx, __del, __cookie);
    }

    ::std::string end_getPassword(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getPassword(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPassword(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<User> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<User> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<User> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<User> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<User> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<User> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<User> ice_secure(bool __secure) const
    {
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<User> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<User> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<User> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<User> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<User> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<User> ice_twoway() const
    {
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<User> ice_oneway() const
    {
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<User> ice_batchOneway() const
    {
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<User> ice_datagram() const
    {
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<User> ice_batchDatagram() const
    {
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<User> ice_compress(bool __compress) const
    {
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<User> ice_timeout(int __timeout) const
    {
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<User> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<User> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<User*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Server : virtual public ::IceProxy::Ice::Object
{
public:

    ::Chat::RoomPrx CreateRoom(const ::std::string& __p_name)
    {
        return CreateRoom(__p_name, 0);
    }
    ::Chat::RoomPrx CreateRoom(const ::std::string& __p_name, const ::Ice::Context& __ctx)
    {
        return CreateRoom(__p_name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_CreateRoom(const ::std::string& __p_name, const ::IceInternal::Function<void (const ::Chat::RoomPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_CreateRoom(__p_name, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_CreateRoom(const ::std::string& __p_name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_CreateRoom(__p_name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_CreateRoom(const ::std::string& __p_name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Chat::RoomPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_CreateRoom(__p_name, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_CreateRoom(const ::std::string& __p_name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_CreateRoom(__p_name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_CreateRoom(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Chat::RoomPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_CreateRoom(const ::std::string& __p_name)
    {
        return begin_CreateRoom(__p_name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_CreateRoom(const ::std::string& __p_name, const ::Ice::Context& __ctx)
    {
        return begin_CreateRoom(__p_name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_CreateRoom(const ::std::string& __p_name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CreateRoom(__p_name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CreateRoom(const ::std::string& __p_name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CreateRoom(__p_name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CreateRoom(const ::std::string& __p_name, const ::Chat::Callback_Server_CreateRoomPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CreateRoom(__p_name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CreateRoom(const ::std::string& __p_name, const ::Ice::Context& __ctx, const ::Chat::Callback_Server_CreateRoomPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CreateRoom(__p_name, &__ctx, __del, __cookie);
    }

    ::Chat::RoomPrx end_CreateRoom(const ::Ice::AsyncResultPtr&);
    
private:

    ::Chat::RoomPrx CreateRoom(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_CreateRoom(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Chat::RoomList getRooms()
    {
        return getRooms(0);
    }
    ::Chat::RoomList getRooms(const ::Ice::Context& __ctx)
    {
        return getRooms(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getRooms(const ::IceInternal::Function<void (const ::Chat::RoomList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRooms(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRooms(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRooms(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getRooms(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Chat::RoomList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRooms(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRooms(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRooms(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getRooms(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Chat::RoomList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getRooms()
    {
        return begin_getRooms(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::Context& __ctx)
    {
        return begin_getRooms(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRooms(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRooms(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Chat::Callback_Server_getRoomsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRooms(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::Context& __ctx, const ::Chat::Callback_Server_getRoomsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRooms(&__ctx, __del, __cookie);
    }

    ::Chat::RoomList end_getRooms(const ::Ice::AsyncResultPtr&);
    
private:

    ::Chat::RoomList getRooms(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Chat::RoomPrx FindRoom(const ::std::string& __p_name)
    {
        return FindRoom(__p_name, 0);
    }
    ::Chat::RoomPrx FindRoom(const ::std::string& __p_name, const ::Ice::Context& __ctx)
    {
        return FindRoom(__p_name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_FindRoom(const ::std::string& __p_name, const ::IceInternal::Function<void (const ::Chat::RoomPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_FindRoom(__p_name, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_FindRoom(const ::std::string& __p_name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_FindRoom(__p_name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_FindRoom(const ::std::string& __p_name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Chat::RoomPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_FindRoom(__p_name, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_FindRoom(const ::std::string& __p_name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_FindRoom(__p_name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_FindRoom(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Chat::RoomPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_FindRoom(const ::std::string& __p_name)
    {
        return begin_FindRoom(__p_name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_FindRoom(const ::std::string& __p_name, const ::Ice::Context& __ctx)
    {
        return begin_FindRoom(__p_name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_FindRoom(const ::std::string& __p_name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_FindRoom(__p_name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_FindRoom(const ::std::string& __p_name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_FindRoom(__p_name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_FindRoom(const ::std::string& __p_name, const ::Chat::Callback_Server_FindRoomPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_FindRoom(__p_name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_FindRoom(const ::std::string& __p_name, const ::Ice::Context& __ctx, const ::Chat::Callback_Server_FindRoomPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_FindRoom(__p_name, &__ctx, __del, __cookie);
    }

    ::Chat::RoomPrx end_FindRoom(const ::Ice::AsyncResultPtr&);
    
private:

    ::Chat::RoomPrx FindRoom(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_FindRoom(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void RegisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory)
    {
        RegisterRoomFactory(__p_factory, 0);
    }
    void RegisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::Ice::Context& __ctx)
    {
        RegisterRoomFactory(__p_factory, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_RegisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_RegisterRoomFactory(__p_factory, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_RegisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RegisterRoomFactory(__p_factory, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RegisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_RegisterRoomFactory(__p_factory, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_RegisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_RegisterRoomFactory(__p_factory, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_RegisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory)
    {
        return begin_RegisterRoomFactory(__p_factory, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RegisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::Ice::Context& __ctx)
    {
        return begin_RegisterRoomFactory(__p_factory, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_RegisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterRoomFactory(__p_factory, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterRoomFactory(__p_factory, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::Chat::Callback_Server_RegisterRoomFactoryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterRoomFactory(__p_factory, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_RegisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::Ice::Context& __ctx, const ::Chat::Callback_Server_RegisterRoomFactoryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_RegisterRoomFactory(__p_factory, &__ctx, __del, __cookie);
    }

    void end_RegisterRoomFactory(const ::Ice::AsyncResultPtr&);
    
private:

    void RegisterRoomFactory(const ::Chat::RoomFactoryPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_RegisterRoomFactory(const ::Chat::RoomFactoryPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void UnregisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory)
    {
        UnregisterRoomFactory(__p_factory, 0);
    }
    void UnregisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::Ice::Context& __ctx)
    {
        UnregisterRoomFactory(__p_factory, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_UnregisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_UnregisterRoomFactory(__p_factory, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_UnregisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_UnregisterRoomFactory(__p_factory, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_UnregisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_UnregisterRoomFactory(__p_factory, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_UnregisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_UnregisterRoomFactory(__p_factory, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_UnregisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory)
    {
        return begin_UnregisterRoomFactory(__p_factory, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UnregisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::Ice::Context& __ctx)
    {
        return begin_UnregisterRoomFactory(__p_factory, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UnregisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UnregisterRoomFactory(__p_factory, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UnregisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UnregisterRoomFactory(__p_factory, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UnregisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::Chat::Callback_Server_UnregisterRoomFactoryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UnregisterRoomFactory(__p_factory, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UnregisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::Ice::Context& __ctx, const ::Chat::Callback_Server_UnregisterRoomFactoryPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UnregisterRoomFactory(__p_factory, &__ctx, __del, __cookie);
    }

    void end_UnregisterRoomFactory(const ::Ice::AsyncResultPtr&);
    
private:

    void UnregisterRoomFactory(const ::Chat::RoomFactoryPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_UnregisterRoomFactory(const ::Chat::RoomFactoryPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Server> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_secure(bool __secure) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_twoway() const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_oneway() const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_batchOneway() const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_datagram() const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_batchDatagram() const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_compress(bool __compress) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Room : virtual public ::IceProxy::Ice::Object
{
public:

    ::std::string getName()
    {
        return getName(0);
    }
    ::std::string getName(const ::Ice::Context& __ctx)
    {
        return getName(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getName(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getName(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getName()
    {
        return begin_getName(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx)
    {
        return begin_getName(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Chat::Callback_Room_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::Chat::Callback_Room_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::std::string end_getName(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getName(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Chat::UserList getUsers()
    {
        return getUsers(0);
    }
    ::Chat::UserList getUsers(const ::Ice::Context& __ctx)
    {
        return getUsers(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getUsers(const ::IceInternal::Function<void (const ::Chat::UserList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getUsers(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getUsers(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getUsers(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getUsers(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Chat::UserList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getUsers(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getUsers(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getUsers(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getUsers(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Chat::UserList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getUsers()
    {
        return begin_getUsers(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUsers(const ::Ice::Context& __ctx)
    {
        return begin_getUsers(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getUsers(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUsers(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUsers(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUsers(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUsers(const ::Chat::Callback_Room_getUsersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUsers(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getUsers(const ::Ice::Context& __ctx, const ::Chat::Callback_Room_getUsersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getUsers(&__ctx, __del, __cookie);
    }

    ::Chat::UserList end_getUsers(const ::Ice::AsyncResultPtr&);
    
private:

    ::Chat::UserList getUsers(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getUsers(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void AddUser(const ::Chat::UserPrx& __p_who, const ::std::string& __p_password)
    {
        AddUser(__p_who, __p_password, 0);
    }
    void AddUser(const ::Chat::UserPrx& __p_who, const ::std::string& __p_password, const ::Ice::Context& __ctx)
    {
        AddUser(__p_who, __p_password, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_AddUser(const ::Chat::UserPrx& __p_who, const ::std::string& __p_password, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_AddUser(__p_who, __p_password, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_AddUser(const ::Chat::UserPrx& __p_who, const ::std::string& __p_password, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_AddUser(__p_who, __p_password, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_AddUser(const ::Chat::UserPrx& __p_who, const ::std::string& __p_password, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_AddUser(__p_who, __p_password, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_AddUser(const ::Chat::UserPrx& __p_who, const ::std::string& __p_password, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_AddUser(__p_who, __p_password, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_AddUser(const ::Chat::UserPrx& __p_who, const ::std::string& __p_password, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_AddUser(const ::Chat::UserPrx& __p_who, const ::std::string& __p_password)
    {
        return begin_AddUser(__p_who, __p_password, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AddUser(const ::Chat::UserPrx& __p_who, const ::std::string& __p_password, const ::Ice::Context& __ctx)
    {
        return begin_AddUser(__p_who, __p_password, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_AddUser(const ::Chat::UserPrx& __p_who, const ::std::string& __p_password, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AddUser(__p_who, __p_password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AddUser(const ::Chat::UserPrx& __p_who, const ::std::string& __p_password, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AddUser(__p_who, __p_password, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AddUser(const ::Chat::UserPrx& __p_who, const ::std::string& __p_password, const ::Chat::Callback_Room_AddUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AddUser(__p_who, __p_password, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_AddUser(const ::Chat::UserPrx& __p_who, const ::std::string& __p_password, const ::Ice::Context& __ctx, const ::Chat::Callback_Room_AddUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_AddUser(__p_who, __p_password, &__ctx, __del, __cookie);
    }

    void end_AddUser(const ::Ice::AsyncResultPtr&);
    
private:

    void AddUser(const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_AddUser(const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void ChangePassword(const ::Chat::UserPrx& __p_user, const ::std::string& __p_oldpassword, const ::std::string& __p_newpassword)
    {
        ChangePassword(__p_user, __p_oldpassword, __p_newpassword, 0);
    }
    void ChangePassword(const ::Chat::UserPrx& __p_user, const ::std::string& __p_oldpassword, const ::std::string& __p_newpassword, const ::Ice::Context& __ctx)
    {
        ChangePassword(__p_user, __p_oldpassword, __p_newpassword, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_ChangePassword(const ::Chat::UserPrx& __p_user, const ::std::string& __p_oldpassword, const ::std::string& __p_newpassword, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ChangePassword(__p_user, __p_oldpassword, __p_newpassword, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ChangePassword(const ::Chat::UserPrx& __p_user, const ::std::string& __p_oldpassword, const ::std::string& __p_newpassword, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ChangePassword(__p_user, __p_oldpassword, __p_newpassword, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_ChangePassword(const ::Chat::UserPrx& __p_user, const ::std::string& __p_oldpassword, const ::std::string& __p_newpassword, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_ChangePassword(__p_user, __p_oldpassword, __p_newpassword, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_ChangePassword(const ::Chat::UserPrx& __p_user, const ::std::string& __p_oldpassword, const ::std::string& __p_newpassword, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_ChangePassword(__p_user, __p_oldpassword, __p_newpassword, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_ChangePassword(const ::Chat::UserPrx& __p_user, const ::std::string& __p_oldpassword, const ::std::string& __p_newpassword, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_ChangePassword(const ::Chat::UserPrx& __p_user, const ::std::string& __p_oldpassword, const ::std::string& __p_newpassword)
    {
        return begin_ChangePassword(__p_user, __p_oldpassword, __p_newpassword, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ChangePassword(const ::Chat::UserPrx& __p_user, const ::std::string& __p_oldpassword, const ::std::string& __p_newpassword, const ::Ice::Context& __ctx)
    {
        return begin_ChangePassword(__p_user, __p_oldpassword, __p_newpassword, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ChangePassword(const ::Chat::UserPrx& __p_user, const ::std::string& __p_oldpassword, const ::std::string& __p_newpassword, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ChangePassword(__p_user, __p_oldpassword, __p_newpassword, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ChangePassword(const ::Chat::UserPrx& __p_user, const ::std::string& __p_oldpassword, const ::std::string& __p_newpassword, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ChangePassword(__p_user, __p_oldpassword, __p_newpassword, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ChangePassword(const ::Chat::UserPrx& __p_user, const ::std::string& __p_oldpassword, const ::std::string& __p_newpassword, const ::Chat::Callback_Room_ChangePasswordPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ChangePassword(__p_user, __p_oldpassword, __p_newpassword, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ChangePassword(const ::Chat::UserPrx& __p_user, const ::std::string& __p_oldpassword, const ::std::string& __p_newpassword, const ::Ice::Context& __ctx, const ::Chat::Callback_Room_ChangePasswordPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ChangePassword(__p_user, __p_oldpassword, __p_newpassword, &__ctx, __del, __cookie);
    }

    void end_ChangePassword(const ::Ice::AsyncResultPtr&);
    
private:

    void ChangePassword(const ::Chat::UserPrx&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ChangePassword(const ::Chat::UserPrx&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void SendMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::std::string& __p_passwd)
    {
        SendMessage(__p_who, __p_message, __p_passwd, 0);
    }
    void SendMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::std::string& __p_passwd, const ::Ice::Context& __ctx)
    {
        SendMessage(__p_who, __p_message, __p_passwd, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_SendMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::std::string& __p_passwd, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_SendMessage(__p_who, __p_message, __p_passwd, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_SendMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::std::string& __p_passwd, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SendMessage(__p_who, __p_message, __p_passwd, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SendMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::std::string& __p_passwd, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_SendMessage(__p_who, __p_message, __p_passwd, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_SendMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::std::string& __p_passwd, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_SendMessage(__p_who, __p_message, __p_passwd, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_SendMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::std::string& __p_passwd)
    {
        return begin_SendMessage(__p_who, __p_message, __p_passwd, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::std::string& __p_passwd, const ::Ice::Context& __ctx)
    {
        return begin_SendMessage(__p_who, __p_message, __p_passwd, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SendMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::std::string& __p_passwd, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendMessage(__p_who, __p_message, __p_passwd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::std::string& __p_passwd, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendMessage(__p_who, __p_message, __p_passwd, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::std::string& __p_passwd, const ::Chat::Callback_Room_SendMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendMessage(__p_who, __p_message, __p_passwd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SendMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::std::string& __p_passwd, const ::Ice::Context& __ctx, const ::Chat::Callback_Room_SendMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SendMessage(__p_who, __p_message, __p_passwd, &__ctx, __del, __cookie);
    }

    void end_SendMessage(const ::Ice::AsyncResultPtr&);
    
private:

    void SendMessage(const ::Chat::UserPrx&, const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SendMessage(const ::Chat::UserPrx&, const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void Destroy()
    {
        Destroy(0);
    }
    void Destroy(const ::Ice::Context& __ctx)
    {
        Destroy(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_Destroy(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_Destroy(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_Destroy(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_Destroy(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_Destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_Destroy(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_Destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_Destroy(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_Destroy()
    {
        return begin_Destroy(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Destroy(const ::Ice::Context& __ctx)
    {
        return begin_Destroy(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Destroy(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Destroy(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Destroy(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Destroy(const ::Chat::Callback_Room_DestroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Destroy(const ::Ice::Context& __ctx, const ::Chat::Callback_Room_DestroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Destroy(&__ctx, __del, __cookie);
    }

    void end_Destroy(const ::Ice::AsyncResultPtr&);
    
private:

    void Destroy(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_Destroy(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void LeaveRoom(const ::Chat::UserPrx& __p_who, const ::std::string& __p_passwd)
    {
        LeaveRoom(__p_who, __p_passwd, 0);
    }
    void LeaveRoom(const ::Chat::UserPrx& __p_who, const ::std::string& __p_passwd, const ::Ice::Context& __ctx)
    {
        LeaveRoom(__p_who, __p_passwd, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_LeaveRoom(const ::Chat::UserPrx& __p_who, const ::std::string& __p_passwd, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_LeaveRoom(__p_who, __p_passwd, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_LeaveRoom(const ::Chat::UserPrx& __p_who, const ::std::string& __p_passwd, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_LeaveRoom(__p_who, __p_passwd, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_LeaveRoom(const ::Chat::UserPrx& __p_who, const ::std::string& __p_passwd, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_LeaveRoom(__p_who, __p_passwd, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_LeaveRoom(const ::Chat::UserPrx& __p_who, const ::std::string& __p_passwd, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_LeaveRoom(__p_who, __p_passwd, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_LeaveRoom(const ::Chat::UserPrx& __p_who, const ::std::string& __p_passwd)
    {
        return begin_LeaveRoom(__p_who, __p_passwd, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_LeaveRoom(const ::Chat::UserPrx& __p_who, const ::std::string& __p_passwd, const ::Ice::Context& __ctx)
    {
        return begin_LeaveRoom(__p_who, __p_passwd, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_LeaveRoom(const ::Chat::UserPrx& __p_who, const ::std::string& __p_passwd, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_LeaveRoom(__p_who, __p_passwd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_LeaveRoom(const ::Chat::UserPrx& __p_who, const ::std::string& __p_passwd, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_LeaveRoom(__p_who, __p_passwd, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_LeaveRoom(const ::Chat::UserPrx& __p_who, const ::std::string& __p_passwd, const ::Chat::Callback_Room_LeaveRoomPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_LeaveRoom(__p_who, __p_passwd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_LeaveRoom(const ::Chat::UserPrx& __p_who, const ::std::string& __p_passwd, const ::Ice::Context& __ctx, const ::Chat::Callback_Room_LeaveRoomPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_LeaveRoom(__p_who, __p_passwd, &__ctx, __del, __cookie);
    }

    void end_LeaveRoom(const ::Ice::AsyncResultPtr&);
    
private:

    void LeaveRoom(const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_LeaveRoom(const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Room> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Room*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Room> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Room*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Room> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Room*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Room> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Room*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Room> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Room*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Room> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Room*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Room> ice_secure(bool __secure) const
    {
        return dynamic_cast<Room*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Room> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Room*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Room> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Room*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Room> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Room*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Room> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Room*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Room> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<Room*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Room> ice_twoway() const
    {
        return dynamic_cast<Room*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Room> ice_oneway() const
    {
        return dynamic_cast<Room*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Room> ice_batchOneway() const
    {
        return dynamic_cast<Room*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Room> ice_datagram() const
    {
        return dynamic_cast<Room*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Room> ice_batchDatagram() const
    {
        return dynamic_cast<Room*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Room> ice_compress(bool __compress) const
    {
        return dynamic_cast<Room*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Room> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Room*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Room> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Room*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Room> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Room*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class RoomFactory : virtual public ::IceProxy::Ice::Object
{
public:

    ::Chat::RoomPrx createRoom(const ::std::string& __p_name)
    {
        return createRoom(__p_name, 0);
    }
    ::Chat::RoomPrx createRoom(const ::std::string& __p_name, const ::Ice::Context& __ctx)
    {
        return createRoom(__p_name, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_createRoom(const ::std::string& __p_name, const ::IceInternal::Function<void (const ::Chat::RoomPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createRoom(__p_name, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createRoom(const ::std::string& __p_name, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createRoom(__p_name, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_createRoom(const ::std::string& __p_name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Chat::RoomPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_createRoom(__p_name, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_createRoom(const ::std::string& __p_name, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_createRoom(__p_name, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_createRoom(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Chat::RoomPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_createRoom(const ::std::string& __p_name)
    {
        return begin_createRoom(__p_name, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createRoom(const ::std::string& __p_name, const ::Ice::Context& __ctx)
    {
        return begin_createRoom(__p_name, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_createRoom(const ::std::string& __p_name, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createRoom(__p_name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createRoom(const ::std::string& __p_name, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createRoom(__p_name, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createRoom(const ::std::string& __p_name, const ::Chat::Callback_RoomFactory_createRoomPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createRoom(__p_name, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_createRoom(const ::std::string& __p_name, const ::Ice::Context& __ctx, const ::Chat::Callback_RoomFactory_createRoomPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_createRoom(__p_name, &__ctx, __del, __cookie);
    }

    ::Chat::RoomPrx end_createRoom(const ::Ice::AsyncResultPtr&);
    
private:

    ::Chat::RoomPrx createRoom(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_createRoom(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Chat::RoomList getRooms()
    {
        return getRooms(0);
    }
    ::Chat::RoomList getRooms(const ::Ice::Context& __ctx)
    {
        return getRooms(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getRooms(const ::IceInternal::Function<void (const ::Chat::RoomList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRooms(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRooms(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRooms(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getRooms(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Chat::RoomList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getRooms(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getRooms(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getRooms(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getRooms(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Chat::RoomList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent);
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getRooms()
    {
        return begin_getRooms(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::Context& __ctx)
    {
        return begin_getRooms(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRooms(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRooms(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Chat::Callback_RoomFactory_getRoomsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRooms(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::Context& __ctx, const ::Chat::Callback_RoomFactory_getRoomsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getRooms(&__ctx, __del, __cookie);
    }

    ::Chat::RoomList end_getRooms(const ::Ice::AsyncResultPtr&);
    
private:

    ::Chat::RoomList getRooms(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getRooms(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<RoomFactory> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<RoomFactory*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<RoomFactory> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<RoomFactory*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RoomFactory> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<RoomFactory*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<RoomFactory> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<RoomFactory*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RoomFactory> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<RoomFactory*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<RoomFactory> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<RoomFactory*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<RoomFactory> ice_secure(bool __secure) const
    {
        return dynamic_cast<RoomFactory*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<RoomFactory> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<RoomFactory*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<RoomFactory> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<RoomFactory*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<RoomFactory> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<RoomFactory*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<RoomFactory> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<RoomFactory*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<RoomFactory> ice_invocationTimeout(int __timeout) const
    {
        return dynamic_cast<RoomFactory*>(::IceProxy::Ice::Object::ice_invocationTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RoomFactory> ice_twoway() const
    {
        return dynamic_cast<RoomFactory*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<RoomFactory> ice_oneway() const
    {
        return dynamic_cast<RoomFactory*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<RoomFactory> ice_batchOneway() const
    {
        return dynamic_cast<RoomFactory*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<RoomFactory> ice_datagram() const
    {
        return dynamic_cast<RoomFactory*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<RoomFactory> ice_batchDatagram() const
    {
        return dynamic_cast<RoomFactory*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<RoomFactory> ice_compress(bool __compress) const
    {
        return dynamic_cast<RoomFactory*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<RoomFactory> ice_timeout(int __timeout) const
    {
        return dynamic_cast<RoomFactory*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<RoomFactory> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<RoomFactory*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<RoomFactory> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<RoomFactory*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace Chat
{

class User : virtual public ::Ice::Object
{
public:

    typedef UserPrx ProxyType;
    typedef UserPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void SendMessage(const ::Chat::RoomPrx&, const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SendMessage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void SendPrivateMessage(const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SendPrivateMessage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getName(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getPassword(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getPassword(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const User& l, const User& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const User& l, const User& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Server : virtual public ::Ice::Object
{
public:

    typedef ServerPrx ProxyType;
    typedef ServerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Chat::RoomPrx CreateRoom(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___CreateRoom(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Chat::RoomList getRooms(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRooms(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Chat::RoomPrx FindRoom(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___FindRoom(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void RegisterRoomFactory(const ::Chat::RoomFactoryPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___RegisterRoomFactory(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void UnregisterRoomFactory(const ::Chat::RoomFactoryPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___UnregisterRoomFactory(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const Server& l, const Server& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Server& l, const Server& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Room : virtual public ::Ice::Object
{
public:

    typedef RoomPrx ProxyType;
    typedef RoomPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::std::string getName(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getName(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Chat::UserList getUsers(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getUsers(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void AddUser(const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___AddUser(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void ChangePassword(const ::Chat::UserPrx&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ChangePassword(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void SendMessage(const ::Chat::UserPrx&, const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SendMessage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void Destroy(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___Destroy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void LeaveRoom(const ::Chat::UserPrx&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___LeaveRoom(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const Room& l, const Room& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Room& l, const Room& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class RoomFactory : virtual public ::Ice::Object
{
public:

    typedef RoomFactoryPrx ProxyType;
    typedef RoomFactoryPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Chat::RoomPrx createRoom(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___createRoom(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Chat::RoomList getRooms(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getRooms(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
};

inline bool operator==(const RoomFactory& l, const RoomFactory& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const RoomFactory& l, const RoomFactory& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Chat
{

template<class T>
class CallbackNC_User_SendMessage : public Callback_User_SendMessage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_User_SendMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_User_SendMessagePtr
newCallback_User_SendMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_SendMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_User_SendMessagePtr
newCallback_User_SendMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_SendMessage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_User_SendMessagePtr
newCallback_User_SendMessage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_SendMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_User_SendMessagePtr
newCallback_User_SendMessage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_SendMessage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_User_SendMessage : public Callback_User_SendMessage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_User_SendMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_User_SendMessagePtr
newCallback_User_SendMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_SendMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_User_SendMessagePtr
newCallback_User_SendMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_SendMessage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_User_SendMessagePtr
newCallback_User_SendMessage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_SendMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_User_SendMessagePtr
newCallback_User_SendMessage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_SendMessage<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_User_SendPrivateMessage : public Callback_User_SendPrivateMessage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_User_SendPrivateMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_User_SendPrivateMessagePtr
newCallback_User_SendPrivateMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_SendPrivateMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_User_SendPrivateMessagePtr
newCallback_User_SendPrivateMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_SendPrivateMessage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_User_SendPrivateMessagePtr
newCallback_User_SendPrivateMessage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_SendPrivateMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_User_SendPrivateMessagePtr
newCallback_User_SendPrivateMessage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_SendPrivateMessage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_User_SendPrivateMessage : public Callback_User_SendPrivateMessage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_User_SendPrivateMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_User_SendPrivateMessagePtr
newCallback_User_SendPrivateMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_SendPrivateMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_User_SendPrivateMessagePtr
newCallback_User_SendPrivateMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_SendPrivateMessage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_User_SendPrivateMessagePtr
newCallback_User_SendPrivateMessage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_SendPrivateMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_User_SendPrivateMessagePtr
newCallback_User_SendPrivateMessage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_SendPrivateMessage<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_User_getName : public Callback_User_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_User_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::UserPrx __proxy = ::Chat::UserPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_User_getNamePtr
newCallback_User_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_getName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_User_getNamePtr
newCallback_User_getName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_getName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_User_getName : public Callback_User_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_User_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::UserPrx __proxy = ::Chat::UserPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_User_getNamePtr
newCallback_User_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_User_getNamePtr
newCallback_User_getName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_User_getPassword : public Callback_User_getPassword_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_User_getPassword(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::UserPrx __proxy = ::Chat::UserPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getPassword(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_User_getPasswordPtr
newCallback_User_getPassword(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_getPassword<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_User_getPasswordPtr
newCallback_User_getPassword(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_User_getPassword<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_User_getPassword : public Callback_User_getPassword_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_User_getPassword(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::UserPrx __proxy = ::Chat::UserPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getPassword(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_User_getPasswordPtr
newCallback_User_getPassword(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_getPassword<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_User_getPasswordPtr
newCallback_User_getPassword(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_User_getPassword<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Server_CreateRoom : public Callback_Server_CreateRoom_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Chat::RoomPrx&);

    CallbackNC_Server_CreateRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::ServerPrx __proxy = ::Chat::ServerPrx::uncheckedCast(__result->getProxy());
        ::Chat::RoomPrx __ret;
        try
        {
            __ret = __proxy->end_CreateRoom(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Server_CreateRoomPtr
newCallback_Server_CreateRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Chat::RoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_CreateRoom<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_CreateRoomPtr
newCallback_Server_CreateRoom(T* instance, void (T::*cb)(const ::Chat::RoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_CreateRoom<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_CreateRoom : public Callback_Server_CreateRoom_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Chat::RoomPrx&, const CT&);

    Callback_Server_CreateRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::ServerPrx __proxy = ::Chat::ServerPrx::uncheckedCast(__result->getProxy());
        ::Chat::RoomPrx __ret;
        try
        {
            __ret = __proxy->end_CreateRoom(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Server_CreateRoomPtr
newCallback_Server_CreateRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Chat::RoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_CreateRoom<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_CreateRoomPtr
newCallback_Server_CreateRoom(T* instance, void (T::*cb)(const ::Chat::RoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_CreateRoom<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Server_getRooms : public Callback_Server_getRooms_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Chat::RoomList&);

    CallbackNC_Server_getRooms(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::ServerPrx __proxy = ::Chat::ServerPrx::uncheckedCast(__result->getProxy());
        ::Chat::RoomList __ret;
        try
        {
            __ret = __proxy->end_getRooms(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Server_getRoomsPtr
newCallback_Server_getRooms(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Chat::RoomList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_getRooms<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_getRoomsPtr
newCallback_Server_getRooms(T* instance, void (T::*cb)(const ::Chat::RoomList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_getRooms<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_getRooms : public Callback_Server_getRooms_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Chat::RoomList&, const CT&);

    Callback_Server_getRooms(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::ServerPrx __proxy = ::Chat::ServerPrx::uncheckedCast(__result->getProxy());
        ::Chat::RoomList __ret;
        try
        {
            __ret = __proxy->end_getRooms(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Server_getRoomsPtr
newCallback_Server_getRooms(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Chat::RoomList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_getRooms<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_getRoomsPtr
newCallback_Server_getRooms(T* instance, void (T::*cb)(const ::Chat::RoomList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_getRooms<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Server_FindRoom : public Callback_Server_FindRoom_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Chat::RoomPrx&);

    CallbackNC_Server_FindRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::ServerPrx __proxy = ::Chat::ServerPrx::uncheckedCast(__result->getProxy());
        ::Chat::RoomPrx __ret;
        try
        {
            __ret = __proxy->end_FindRoom(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Server_FindRoomPtr
newCallback_Server_FindRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Chat::RoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_FindRoom<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_FindRoomPtr
newCallback_Server_FindRoom(T* instance, void (T::*cb)(const ::Chat::RoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_FindRoom<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_FindRoom : public Callback_Server_FindRoom_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Chat::RoomPrx&, const CT&);

    Callback_Server_FindRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::ServerPrx __proxy = ::Chat::ServerPrx::uncheckedCast(__result->getProxy());
        ::Chat::RoomPrx __ret;
        try
        {
            __ret = __proxy->end_FindRoom(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Server_FindRoomPtr
newCallback_Server_FindRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Chat::RoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_FindRoom<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_FindRoomPtr
newCallback_Server_FindRoom(T* instance, void (T::*cb)(const ::Chat::RoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_FindRoom<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Server_RegisterRoomFactory : public Callback_Server_RegisterRoomFactory_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Server_RegisterRoomFactory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Server_RegisterRoomFactoryPtr
newCallback_Server_RegisterRoomFactory(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_RegisterRoomFactory<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_RegisterRoomFactoryPtr
newCallback_Server_RegisterRoomFactory(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_RegisterRoomFactory<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Server_RegisterRoomFactoryPtr
newCallback_Server_RegisterRoomFactory(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_RegisterRoomFactory<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_RegisterRoomFactoryPtr
newCallback_Server_RegisterRoomFactory(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_RegisterRoomFactory<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_RegisterRoomFactory : public Callback_Server_RegisterRoomFactory_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Server_RegisterRoomFactory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Server_RegisterRoomFactoryPtr
newCallback_Server_RegisterRoomFactory(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_RegisterRoomFactory<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_RegisterRoomFactoryPtr
newCallback_Server_RegisterRoomFactory(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_RegisterRoomFactory<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Server_RegisterRoomFactoryPtr
newCallback_Server_RegisterRoomFactory(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_RegisterRoomFactory<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_RegisterRoomFactoryPtr
newCallback_Server_RegisterRoomFactory(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_RegisterRoomFactory<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Server_UnregisterRoomFactory : public Callback_Server_UnregisterRoomFactory_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Server_UnregisterRoomFactory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Server_UnregisterRoomFactoryPtr
newCallback_Server_UnregisterRoomFactory(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_UnregisterRoomFactory<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_UnregisterRoomFactoryPtr
newCallback_Server_UnregisterRoomFactory(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_UnregisterRoomFactory<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Server_UnregisterRoomFactoryPtr
newCallback_Server_UnregisterRoomFactory(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_UnregisterRoomFactory<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_UnregisterRoomFactoryPtr
newCallback_Server_UnregisterRoomFactory(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_UnregisterRoomFactory<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_UnregisterRoomFactory : public Callback_Server_UnregisterRoomFactory_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Server_UnregisterRoomFactory(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Server_UnregisterRoomFactoryPtr
newCallback_Server_UnregisterRoomFactory(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_UnregisterRoomFactory<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_UnregisterRoomFactoryPtr
newCallback_Server_UnregisterRoomFactory(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_UnregisterRoomFactory<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Server_UnregisterRoomFactoryPtr
newCallback_Server_UnregisterRoomFactory(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_UnregisterRoomFactory<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_UnregisterRoomFactoryPtr
newCallback_Server_UnregisterRoomFactory(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_UnregisterRoomFactory<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Room_getName : public Callback_Room_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Room_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::RoomPrx __proxy = ::Chat::RoomPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Room_getNamePtr
newCallback_Room_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_getName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Room_getNamePtr
newCallback_Room_getName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_getName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Room_getName : public Callback_Room_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Room_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::RoomPrx __proxy = ::Chat::RoomPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Room_getNamePtr
newCallback_Room_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Room_getNamePtr
newCallback_Room_getName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Room_getUsers : public Callback_Room_getUsers_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Chat::UserList&);

    CallbackNC_Room_getUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::RoomPrx __proxy = ::Chat::RoomPrx::uncheckedCast(__result->getProxy());
        ::Chat::UserList __ret;
        try
        {
            __ret = __proxy->end_getUsers(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Room_getUsersPtr
newCallback_Room_getUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Chat::UserList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_getUsers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Room_getUsersPtr
newCallback_Room_getUsers(T* instance, void (T::*cb)(const ::Chat::UserList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_getUsers<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Room_getUsers : public Callback_Room_getUsers_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Chat::UserList&, const CT&);

    Callback_Room_getUsers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::RoomPrx __proxy = ::Chat::RoomPrx::uncheckedCast(__result->getProxy());
        ::Chat::UserList __ret;
        try
        {
            __ret = __proxy->end_getUsers(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Room_getUsersPtr
newCallback_Room_getUsers(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Chat::UserList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_getUsers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Room_getUsersPtr
newCallback_Room_getUsers(T* instance, void (T::*cb)(const ::Chat::UserList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_getUsers<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Room_AddUser : public Callback_Room_AddUser_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Room_AddUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::RoomPrx __proxy = ::Chat::RoomPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_AddUser(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Room_AddUserPtr
newCallback_Room_AddUser(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_AddUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Room_AddUserPtr
newCallback_Room_AddUser(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_AddUser<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Room_AddUserPtr
newCallback_Room_AddUser(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_AddUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Room_AddUserPtr
newCallback_Room_AddUser(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_AddUser<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Room_AddUser : public Callback_Room_AddUser_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Room_AddUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::RoomPrx __proxy = ::Chat::RoomPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_AddUser(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Room_AddUserPtr
newCallback_Room_AddUser(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_AddUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Room_AddUserPtr
newCallback_Room_AddUser(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_AddUser<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Room_AddUserPtr
newCallback_Room_AddUser(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_AddUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Room_AddUserPtr
newCallback_Room_AddUser(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_AddUser<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Room_ChangePassword : public Callback_Room_ChangePassword_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Room_ChangePassword(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::RoomPrx __proxy = ::Chat::RoomPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_ChangePassword(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

    private:

    Response _response;
};

template<class T> Callback_Room_ChangePasswordPtr
newCallback_Room_ChangePassword(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_ChangePassword<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Room_ChangePasswordPtr
newCallback_Room_ChangePassword(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_ChangePassword<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Room_ChangePasswordPtr
newCallback_Room_ChangePassword(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_ChangePassword<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Room_ChangePasswordPtr
newCallback_Room_ChangePassword(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_ChangePassword<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Room_ChangePassword : public Callback_Room_ChangePassword_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Room_ChangePassword(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::RoomPrx __proxy = ::Chat::RoomPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_ChangePassword(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_Room_ChangePasswordPtr
newCallback_Room_ChangePassword(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_ChangePassword<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Room_ChangePasswordPtr
newCallback_Room_ChangePassword(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_ChangePassword<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Room_ChangePasswordPtr
newCallback_Room_ChangePassword(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_ChangePassword<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Room_ChangePasswordPtr
newCallback_Room_ChangePassword(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_ChangePassword<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Room_SendMessage : public Callback_Room_SendMessage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Room_SendMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Room_SendMessagePtr
newCallback_Room_SendMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_SendMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Room_SendMessagePtr
newCallback_Room_SendMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_SendMessage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Room_SendMessagePtr
newCallback_Room_SendMessage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_SendMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Room_SendMessagePtr
newCallback_Room_SendMessage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_SendMessage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Room_SendMessage : public Callback_Room_SendMessage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Room_SendMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Room_SendMessagePtr
newCallback_Room_SendMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_SendMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Room_SendMessagePtr
newCallback_Room_SendMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_SendMessage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Room_SendMessagePtr
newCallback_Room_SendMessage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_SendMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Room_SendMessagePtr
newCallback_Room_SendMessage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_SendMessage<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Room_Destroy : public Callback_Room_Destroy_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Room_Destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Room_DestroyPtr
newCallback_Room_Destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_Destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Room_DestroyPtr
newCallback_Room_Destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_Destroy<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Room_DestroyPtr
newCallback_Room_Destroy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_Destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Room_DestroyPtr
newCallback_Room_Destroy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_Destroy<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Room_Destroy : public Callback_Room_Destroy_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Room_Destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Room_DestroyPtr
newCallback_Room_Destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_Destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Room_DestroyPtr
newCallback_Room_Destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_Destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Room_DestroyPtr
newCallback_Room_Destroy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_Destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Room_DestroyPtr
newCallback_Room_Destroy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_Destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Room_LeaveRoom : public Callback_Room_LeaveRoom_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Room_LeaveRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Room_LeaveRoomPtr
newCallback_Room_LeaveRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_LeaveRoom<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Room_LeaveRoomPtr
newCallback_Room_LeaveRoom(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_LeaveRoom<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Room_LeaveRoomPtr
newCallback_Room_LeaveRoom(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_LeaveRoom<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Room_LeaveRoomPtr
newCallback_Room_LeaveRoom(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Room_LeaveRoom<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Room_LeaveRoom : public Callback_Room_LeaveRoom_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Room_LeaveRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Room_LeaveRoomPtr
newCallback_Room_LeaveRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_LeaveRoom<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Room_LeaveRoomPtr
newCallback_Room_LeaveRoom(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_LeaveRoom<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Room_LeaveRoomPtr
newCallback_Room_LeaveRoom(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_LeaveRoom<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Room_LeaveRoomPtr
newCallback_Room_LeaveRoom(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Room_LeaveRoom<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_RoomFactory_createRoom : public Callback_RoomFactory_createRoom_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Chat::RoomPrx&);

    CallbackNC_RoomFactory_createRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::RoomFactoryPrx __proxy = ::Chat::RoomFactoryPrx::uncheckedCast(__result->getProxy());
        ::Chat::RoomPrx __ret;
        try
        {
            __ret = __proxy->end_createRoom(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RoomFactory_createRoomPtr
newCallback_RoomFactory_createRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Chat::RoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RoomFactory_createRoom<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RoomFactory_createRoomPtr
newCallback_RoomFactory_createRoom(T* instance, void (T::*cb)(const ::Chat::RoomPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RoomFactory_createRoom<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RoomFactory_createRoom : public Callback_RoomFactory_createRoom_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Chat::RoomPrx&, const CT&);

    Callback_RoomFactory_createRoom(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::RoomFactoryPrx __proxy = ::Chat::RoomFactoryPrx::uncheckedCast(__result->getProxy());
        ::Chat::RoomPrx __ret;
        try
        {
            __ret = __proxy->end_createRoom(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RoomFactory_createRoomPtr
newCallback_RoomFactory_createRoom(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Chat::RoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RoomFactory_createRoom<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RoomFactory_createRoomPtr
newCallback_RoomFactory_createRoom(T* instance, void (T::*cb)(const ::Chat::RoomPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RoomFactory_createRoom<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RoomFactory_getRooms : public Callback_RoomFactory_getRooms_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Chat::RoomList&);

    CallbackNC_RoomFactory_getRooms(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::RoomFactoryPrx __proxy = ::Chat::RoomFactoryPrx::uncheckedCast(__result->getProxy());
        ::Chat::RoomList __ret;
        try
        {
            __ret = __proxy->end_getRooms(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(__ret);
        }
    }

    private:

    Response _response;
};

template<class T> Callback_RoomFactory_getRoomsPtr
newCallback_RoomFactory_getRooms(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Chat::RoomList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RoomFactory_getRooms<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RoomFactory_getRoomsPtr
newCallback_RoomFactory_getRooms(T* instance, void (T::*cb)(const ::Chat::RoomList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RoomFactory_getRooms<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RoomFactory_getRooms : public Callback_RoomFactory_getRooms_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Chat::RoomList&, const CT&);

    Callback_RoomFactory_getRooms(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Chat::RoomFactoryPrx __proxy = ::Chat::RoomFactoryPrx::uncheckedCast(__result->getProxy());
        ::Chat::RoomList __ret;
        try
        {
            __ret = __proxy->end_getRooms(__result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(__result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    private:

    Response _response;
};

template<class T, typename CT> Callback_RoomFactory_getRoomsPtr
newCallback_RoomFactory_getRooms(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Chat::RoomList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RoomFactory_getRooms<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RoomFactory_getRoomsPtr
newCallback_RoomFactory_getRooms(T* instance, void (T::*cb)(const ::Chat::RoomList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RoomFactory_getRooms<T, CT>(instance, cb, excb, sentcb);
}

}

#include <IceUtil/PopDisableWarnings.h>
#endif
