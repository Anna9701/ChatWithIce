// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `chat.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <chat.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 3
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __Chat__User__SendMessage_name = "SendMessage";

const ::std::string __Chat__User__SendPrivateMessage_name = "SendPrivateMessage";

const ::std::string __Chat__User__getName_name = "getName";

const ::std::string __Chat__Server__CreateRoom_name = "CreateRoom";

const ::std::string __Chat__Server__getRooms_name = "getRooms";

const ::std::string __Chat__Server__FindRoom_name = "FindRoom";

const ::std::string __Chat__Server__RegisterRoomFactory_name = "RegisterRoomFactory";

const ::std::string __Chat__Server__UnregisterRoomFactory_name = "UnregisterRoomFactory";

const ::std::string __Chat__Room__getName_name = "getName";

const ::std::string __Chat__Room__getUsers_name = "getUsers";

const ::std::string __Chat__Room__AddUser_name = "AddUser";

const ::std::string __Chat__Room__ChangePassword_name = "ChangePassword";

const ::std::string __Chat__Room__SendMessage_name = "SendMessage";

const ::std::string __Chat__Room__Destroy_name = "Destroy";

const ::std::string __Chat__Room__LeaveRoom_name = "LeaveRoom";

const ::std::string __Chat__RoomFactory__createRoom_name = "createRoom";

const ::std::string __Chat__RoomFactory__getRooms_name = "getRooms";

}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::UserAlreadyExists> __Chat__UserAlreadyExists_init("::Chat::UserAlreadyExists");

}

Chat::UserAlreadyExists::~UserAlreadyExists() throw()
{
}

::std::string
Chat::UserAlreadyExists::ice_name() const
{
    return "Chat::UserAlreadyExists";
}

Chat::UserAlreadyExists*
Chat::UserAlreadyExists::ice_clone() const
{
    return new UserAlreadyExists(*this);
}

void
Chat::UserAlreadyExists::ice_throw() const
{
    throw *this;
}

void
Chat::UserAlreadyExists::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Chat::UserAlreadyExists", -1, true);
    __os->endWriteSlice();
}

void
Chat::UserAlreadyExists::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::NoSuchUserExist> __Chat__NoSuchUserExist_init("::Chat::NoSuchUserExist");

}

Chat::NoSuchUserExist::~NoSuchUserExist() throw()
{
}

::std::string
Chat::NoSuchUserExist::ice_name() const
{
    return "Chat::NoSuchUserExist";
}

Chat::NoSuchUserExist*
Chat::NoSuchUserExist::ice_clone() const
{
    return new NoSuchUserExist(*this);
}

void
Chat::NoSuchUserExist::ice_throw() const
{
    throw *this;
}

void
Chat::NoSuchUserExist::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Chat::NoSuchUserExist", -1, true);
    __os->endWriteSlice();
}

void
Chat::NoSuchUserExist::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::WrongPassword> __Chat__WrongPassword_init("::Chat::WrongPassword");

}

Chat::WrongPassword::~WrongPassword() throw()
{
}

::std::string
Chat::WrongPassword::ice_name() const
{
    return "Chat::WrongPassword";
}

Chat::WrongPassword*
Chat::WrongPassword::ice_clone() const
{
    return new WrongPassword(*this);
}

void
Chat::WrongPassword::ice_throw() const
{
    throw *this;
}

void
Chat::WrongPassword::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Chat::WrongPassword", -1, true);
    __os->endWriteSlice();
}

void
Chat::WrongPassword::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::NoSuchRoomExist> __Chat__NoSuchRoomExist_init("::Chat::NoSuchRoomExist");

}

Chat::NoSuchRoomExist::~NoSuchRoomExist() throw()
{
}

::std::string
Chat::NoSuchRoomExist::ice_name() const
{
    return "Chat::NoSuchRoomExist";
}

Chat::NoSuchRoomExist*
Chat::NoSuchRoomExist::ice_clone() const
{
    return new NoSuchRoomExist(*this);
}

void
Chat::NoSuchRoomExist::ice_throw() const
{
    throw *this;
}

void
Chat::NoSuchRoomExist::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Chat::NoSuchRoomExist", -1, true);
    __os->endWriteSlice();
}

void
Chat::NoSuchRoomExist::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::RoomAlreadyExist> __Chat__RoomAlreadyExist_init("::Chat::RoomAlreadyExist");

}

Chat::RoomAlreadyExist::~RoomAlreadyExist() throw()
{
}

::std::string
Chat::RoomAlreadyExist::ice_name() const
{
    return "Chat::RoomAlreadyExist";
}

Chat::RoomAlreadyExist*
Chat::RoomAlreadyExist::ice_clone() const
{
    return new RoomAlreadyExist(*this);
}

void
Chat::RoomAlreadyExist::ice_throw() const
{
    throw *this;
}

void
Chat::RoomAlreadyExist::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Chat::RoomAlreadyExist", -1, true);
    __os->endWriteSlice();
}

void
Chat::RoomAlreadyExist::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

const ::IceInternal::DefaultUserExceptionFactoryInit< ::Chat::NoResourcesAvailable> __Chat__NoResourcesAvailable_init("::Chat::NoResourcesAvailable");

}

Chat::NoResourcesAvailable::~NoResourcesAvailable() throw()
{
}

::std::string
Chat::NoResourcesAvailable::ice_name() const
{
    return "Chat::NoResourcesAvailable";
}

Chat::NoResourcesAvailable*
Chat::NoResourcesAvailable::ice_clone() const
{
    return new NoResourcesAvailable(*this);
}

void
Chat::NoResourcesAvailable::ice_throw() const
{
    throw *this;
}

void
Chat::NoResourcesAvailable::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Chat::NoResourcesAvailable", -1, true);
    __os->endWriteSlice();
}

void
Chat::NoResourcesAvailable::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(::IceProxy::Chat::User* p) { return p; }

void
::IceProxy::Chat::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Chat::User>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Chat::User;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Chat::User::SendMessage(const ::Chat::RoomPrx& __p_where, const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Chat__User__SendMessage_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_where);
        __os->write(__p_who);
        __os->write(__p_message);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Chat::User::begin_SendMessage(const ::Chat::RoomPrx& __p_where, const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__User__SendMessage_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__User__SendMessage_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_where);
        __os->write(__p_who);
        __os->write(__p_message);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Chat::User::end_SendMessage(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Chat__User__SendMessage_name);
}

void
IceProxy::Chat::User::SendPrivateMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Chat__User__SendPrivateMessage_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_who);
        __os->write(__p_message);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Chat::User::begin_SendPrivateMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__User__SendPrivateMessage_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__User__SendPrivateMessage_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_who);
        __os->write(__p_message);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Chat::User::end_SendPrivateMessage(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Chat__User__SendPrivateMessage_name);
}

::std::string
IceProxy::Chat::User::getName(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__User__getName_name);
    ::IceInternal::Outgoing __og(this, __Chat__User__getName_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::std::string __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::User::begin_getName(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__User__getName_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__User__getName_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__User__getName_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::User::__begin_getName(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::UserPrx __proxy = ::Chat::UserPrx::uncheckedCast(__result->getProxy());
            ::std::string __ret;
            try
            {
                __ret = __proxy->end_getName(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::std::string&)> _response;
    };
    return begin_getName(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::std::string
IceProxy::Chat::User::end_getName(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__User__getName_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::Chat::User::ice_staticId()
{
    return ::Chat::User::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Chat::User::__newInstance() const
{
    return new User;
}
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(::IceProxy::Chat::Server* p) { return p; }

void
::IceProxy::Chat::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Chat::Server>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Chat::Server;
        v->__copyFrom(proxy);
    }
}

::Chat::RoomPrx
IceProxy::Chat::Server::CreateRoom(const ::std::string& __p_name, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__Server__CreateRoom_name);
    ::IceInternal::Outgoing __og(this, __Chat__Server__CreateRoom_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Chat::NoResourcesAvailable&)
        {
            throw;
        }
        catch(const ::Chat::RoomAlreadyExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Chat::RoomPrx __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Server::begin_CreateRoom(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__Server__CreateRoom_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__Server__CreateRoom_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__Server__CreateRoom_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::Server::__begin_CreateRoom(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Chat::RoomPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::Chat::RoomPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::ServerPrx __proxy = ::Chat::ServerPrx::uncheckedCast(__result->getProxy());
            ::Chat::RoomPrx __ret;
            try
            {
                __ret = __proxy->end_CreateRoom(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::Chat::RoomPrx&)> _response;
    };
    return begin_CreateRoom(__p_name, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Chat::RoomPrx
IceProxy::Chat::Server::end_CreateRoom(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__Server__CreateRoom_name);
    ::Chat::RoomPrx __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Chat::NoResourcesAvailable&)
        {
            throw;
        }
        catch(const ::Chat::RoomAlreadyExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Chat::RoomList
IceProxy::Chat::Server::getRooms(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__Server__getRooms_name);
    ::IceInternal::Outgoing __og(this, __Chat__Server__getRooms_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Chat::RoomList __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Server::begin_getRooms(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__Server__getRooms_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__Server__getRooms_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__Server__getRooms_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::Server::__begin_getRooms(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Chat::RoomList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::Chat::RoomList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::ServerPrx __proxy = ::Chat::ServerPrx::uncheckedCast(__result->getProxy());
            ::Chat::RoomList __ret;
            try
            {
                __ret = __proxy->end_getRooms(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::Chat::RoomList&)> _response;
    };
    return begin_getRooms(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Chat::RoomList
IceProxy::Chat::Server::end_getRooms(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__Server__getRooms_name);
    ::Chat::RoomList __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Chat::RoomPrx
IceProxy::Chat::Server::FindRoom(const ::std::string& __p_name, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__Server__FindRoom_name);
    ::IceInternal::Outgoing __og(this, __Chat__Server__FindRoom_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Chat::NoSuchRoomExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Chat::RoomPrx __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Server::begin_FindRoom(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__Server__FindRoom_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__Server__FindRoom_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__Server__FindRoom_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::Server::__begin_FindRoom(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Chat::RoomPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::Chat::RoomPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::ServerPrx __proxy = ::Chat::ServerPrx::uncheckedCast(__result->getProxy());
            ::Chat::RoomPrx __ret;
            try
            {
                __ret = __proxy->end_FindRoom(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::Chat::RoomPrx&)> _response;
    };
    return begin_FindRoom(__p_name, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Chat::RoomPrx
IceProxy::Chat::Server::end_FindRoom(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__Server__FindRoom_name);
    ::Chat::RoomPrx __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Chat::NoSuchRoomExist&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::Chat::Server::RegisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Chat__Server__RegisterRoomFactory_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_factory);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Chat::Server::begin_RegisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__Server__RegisterRoomFactory_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__Server__RegisterRoomFactory_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_factory);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Chat::Server::end_RegisterRoomFactory(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Chat__Server__RegisterRoomFactory_name);
}

void
IceProxy::Chat::Server::UnregisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Chat__Server__UnregisterRoomFactory_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_factory);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Chat::Server::begin_UnregisterRoomFactory(const ::Chat::RoomFactoryPrx& __p_factory, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__Server__UnregisterRoomFactory_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__Server__UnregisterRoomFactory_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_factory);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Chat::Server::end_UnregisterRoomFactory(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Chat__Server__UnregisterRoomFactory_name);
}

const ::std::string&
IceProxy::Chat::Server::ice_staticId()
{
    return ::Chat::Server::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Chat::Server::__newInstance() const
{
    return new Server;
}
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(::IceProxy::Chat::Room* p) { return p; }

void
::IceProxy::Chat::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Chat::Room>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Chat::Room;
        v->__copyFrom(proxy);
    }
}

::std::string
IceProxy::Chat::Room::getName(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__Room__getName_name);
    ::IceInternal::Outgoing __og(this, __Chat__Room__getName_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::std::string __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Room::begin_getName(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__Room__getName_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__Room__getName_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__Room__getName_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::Room::__begin_getName(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::RoomPrx __proxy = ::Chat::RoomPrx::uncheckedCast(__result->getProxy());
            ::std::string __ret;
            try
            {
                __ret = __proxy->end_getName(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::std::string&)> _response;
    };
    return begin_getName(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::std::string
IceProxy::Chat::Room::end_getName(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__Room__getName_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Chat::UserList
IceProxy::Chat::Room::getUsers(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__Room__getUsers_name);
    ::IceInternal::Outgoing __og(this, __Chat__Room__getUsers_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Chat::UserList __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::Room::begin_getUsers(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__Room__getUsers_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__Room__getUsers_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__Room__getUsers_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::Room::__begin_getUsers(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Chat::UserList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::Chat::UserList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::RoomPrx __proxy = ::Chat::RoomPrx::uncheckedCast(__result->getProxy());
            ::Chat::UserList __ret;
            try
            {
                __ret = __proxy->end_getUsers(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::Chat::UserList&)> _response;
    };
    return begin_getUsers(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Chat::UserList
IceProxy::Chat::Room::end_getUsers(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__Room__getUsers_name);
    ::Chat::UserList __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

void
IceProxy::Chat::Room::AddUser(const ::Chat::UserPrx& __p_who, const ::std::string& __p_password, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__Room__AddUser_name);
    ::IceInternal::Outgoing __og(this, __Chat__Room__AddUser_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_who);
        __os->write(__p_password);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Chat::UserAlreadyExists&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Chat::Room::begin_AddUser(const ::Chat::UserPrx& __p_who, const ::std::string& __p_password, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__Room__AddUser_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__Room__AddUser_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__Room__AddUser_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_who);
        __os->write(__p_password);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::Room::__begin_AddUser(const ::Chat::UserPrx& __p_who, const ::std::string& __p_password, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::RoomPrx __proxy = ::Chat::RoomPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_AddUser(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_AddUser(__p_who, __p_password, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::Chat::Room::end_AddUser(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__Room__AddUser_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Chat::UserAlreadyExists&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::Chat::Room::ChangePassword(const ::Chat::UserPrx& __p_user, const ::std::string& __p_oldpassword, const ::std::string& __p_newpassword, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__Room__ChangePassword_name);
    ::IceInternal::Outgoing __og(this, __Chat__Room__ChangePassword_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_user);
        __os->write(__p_oldpassword);
        __os->write(__p_newpassword);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Chat::NoSuchUserExist&)
        {
            throw;
        }
        catch(const ::Chat::WrongPassword&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Chat::Room::begin_ChangePassword(const ::Chat::UserPrx& __p_user, const ::std::string& __p_oldpassword, const ::std::string& __p_newpassword, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__Room__ChangePassword_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__Room__ChangePassword_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__Room__ChangePassword_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_user);
        __os->write(__p_oldpassword);
        __os->write(__p_newpassword);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::Room::__begin_ChangePassword(const ::Chat::UserPrx& __p_user, const ::std::string& __p_oldpassword, const ::std::string& __p_newpassword, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::RoomPrx __proxy = ::Chat::RoomPrx::uncheckedCast(__result->getProxy());
            try
            {
                __proxy->end_ChangePassword(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response();
            }
        }
    
    private:
        
        ::std::function<void ()> _response;
    };
    return begin_ChangePassword(__p_user, __p_oldpassword, __p_newpassword, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::Chat::Room::end_ChangePassword(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__Room__ChangePassword_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Chat::NoSuchUserExist&)
        {
            throw;
        }
        catch(const ::Chat::WrongPassword&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    __result->__readEmptyParams();
}

void
IceProxy::Chat::Room::SendMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::std::string& __p_passwd, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Chat__Room__SendMessage_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_who);
        __os->write(__p_message);
        __os->write(__p_passwd);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Chat::Room::begin_SendMessage(const ::Chat::UserPrx& __p_who, const ::std::string& __p_message, const ::std::string& __p_passwd, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__Room__SendMessage_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__Room__SendMessage_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_who);
        __os->write(__p_message);
        __os->write(__p_passwd);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Chat::Room::end_SendMessage(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Chat__Room__SendMessage_name);
}

void
IceProxy::Chat::Room::Destroy(const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Chat__Room__Destroy_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Chat::Room::begin_Destroy(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__Room__Destroy_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__Room__Destroy_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Chat::Room::end_Destroy(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Chat__Room__Destroy_name);
}

void
IceProxy::Chat::Room::LeaveRoom(const ::Chat::UserPrx& __p_who, const ::std::string& __p_passwd, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __Chat__Room__LeaveRoom_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_who);
        __os->write(__p_passwd);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::Chat::Room::begin_LeaveRoom(const ::Chat::UserPrx& __p_who, const ::std::string& __p_passwd, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__Room__LeaveRoom_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__Room__LeaveRoom_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_who);
        __os->write(__p_passwd);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::Chat::Room::end_LeaveRoom(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Chat__Room__LeaveRoom_name);
}

const ::std::string&
IceProxy::Chat::Room::ice_staticId()
{
    return ::Chat::Room::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Chat::Room::__newInstance() const
{
    return new Room;
}
::IceProxy::Ice::Object* ::IceProxy::Chat::upCast(::IceProxy::Chat::RoomFactory* p) { return p; }

void
::IceProxy::Chat::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Chat::RoomFactory>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Chat::RoomFactory;
        v->__copyFrom(proxy);
    }
}

::Chat::RoomPrx
IceProxy::Chat::RoomFactory::createRoom(const ::std::string& __p_name, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__RoomFactory__createRoom_name);
    ::IceInternal::Outgoing __og(this, __Chat__RoomFactory__createRoom_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Chat::RoomPrx __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::RoomFactory::begin_createRoom(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__RoomFactory__createRoom_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__RoomFactory__createRoom_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__RoomFactory__createRoom_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_name);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::RoomFactory::__begin_createRoom(const ::std::string& __p_name, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Chat::RoomPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::Chat::RoomPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::RoomFactoryPrx __proxy = ::Chat::RoomFactoryPrx::uncheckedCast(__result->getProxy());
            ::Chat::RoomPrx __ret;
            try
            {
                __ret = __proxy->end_createRoom(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::Chat::RoomPrx&)> _response;
    };
    return begin_createRoom(__p_name, __ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Chat::RoomPrx
IceProxy::Chat::RoomFactory::end_createRoom(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__RoomFactory__createRoom_name);
    ::Chat::RoomPrx __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

::Chat::RoomList
IceProxy::Chat::RoomFactory::getRooms(const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__Chat__RoomFactory__getRooms_name);
    ::IceInternal::Outgoing __og(this, __Chat__RoomFactory__getRooms_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::Chat::RoomList __ret;
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__ret);
    __og.endReadParams();
    return __ret;
}

::Ice::AsyncResultPtr
IceProxy::Chat::RoomFactory::begin_getRooms(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Chat__RoomFactory__getRooms_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Chat__RoomFactory__getRooms_name, __del, __cookie);
    try
    {
        __result->prepare(__Chat__RoomFactory__getRooms_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::Chat::RoomFactory::__begin_getRooms(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Chat::RoomList&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::Chat::RoomList&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::Chat::RoomFactoryPrx __proxy = ::Chat::RoomFactoryPrx::uncheckedCast(__result->getProxy());
            ::Chat::RoomList __ret;
            try
            {
                __ret = __proxy->end_getRooms(__result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__ret);
            }
        }
    
    private:
        
        ::std::function<void (const ::Chat::RoomList&)> _response;
    };
    return begin_getRooms(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

::Chat::RoomList
IceProxy::Chat::RoomFactory::end_getRooms(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Chat__RoomFactory__getRooms_name);
    ::Chat::RoomList __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
    return __ret;
}

const ::std::string&
IceProxy::Chat::RoomFactory::ice_staticId()
{
    return ::Chat::RoomFactory::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::Chat::RoomFactory::__newInstance() const
{
    return new RoomFactory;
}

::Ice::Object* Chat::upCast(::Chat::User* p) { return p; }

namespace
{
const ::std::string __Chat__User_ids[2] =
{
    "::Chat::User",
    "::Ice::Object"
};

}

bool
Chat::User::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Chat__User_ids, __Chat__User_ids + 2, _s);
}

::std::vector< ::std::string>
Chat::User::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Chat__User_ids[0], &__Chat__User_ids[2]);
}

const ::std::string&
Chat::User::ice_id(const ::Ice::Current&) const
{
    return __Chat__User_ids[0];
}

const ::std::string&
Chat::User::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::User";
    return typeId;
#else
    return __Chat__User_ids[0];
#endif
}

::Ice::DispatchStatus
Chat::User::___SendMessage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Chat::RoomPrx __p_where;
    ::Chat::UserPrx __p_who;
    ::std::string __p_message;
    __is->read(__p_where);
    __is->read(__p_who);
    __is->read(__p_message);
    __inS.endReadParams();
    SendMessage(__p_where, __p_who, __p_message, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Chat::User::___SendPrivateMessage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Chat::UserPrx __p_who;
    ::std::string __p_message;
    __is->read(__p_who);
    __is->read(__p_message);
    __inS.endReadParams();
    SendPrivateMessage(__p_who, __p_message, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Chat::User::___getName(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::std::string __ret = getName(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Chat__User_all[] =
{
    "SendMessage",
    "SendPrivateMessage",
    "getName",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Chat::User::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Chat__User_all, __Chat__User_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Chat__User_all)
    {
        case 0:
        {
            return ___SendMessage(in, current);
        }
        case 1:
        {
            return ___SendPrivateMessage(in, current);
        }
        case 2:
        {
            return ___getName(in, current);
        }
        case 3:
        {
            return ___ice_id(in, current);
        }
        case 4:
        {
            return ___ice_ids(in, current);
        }
        case 5:
        {
            return ___ice_isA(in, current);
        }
        case 6:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Chat::User::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Chat::User::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Chat::__patch(UserPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Chat::UserPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Chat::User::ice_staticId(), v);
    }
}

::Ice::Object* Chat::upCast(::Chat::Server* p) { return p; }

namespace
{
const ::std::string __Chat__Server_ids[2] =
{
    "::Chat::Server",
    "::Ice::Object"
};

}

bool
Chat::Server::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Chat__Server_ids, __Chat__Server_ids + 2, _s);
}

::std::vector< ::std::string>
Chat::Server::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Chat__Server_ids[0], &__Chat__Server_ids[2]);
}

const ::std::string&
Chat::Server::ice_id(const ::Ice::Current&) const
{
    return __Chat__Server_ids[0];
}

const ::std::string&
Chat::Server::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::Server";
    return typeId;
#else
    return __Chat__Server_ids[0];
#endif
}

::Ice::DispatchStatus
Chat::Server::___CreateRoom(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    __is->read(__p_name);
    __inS.endReadParams();
    try
    {
        ::Chat::RoomPrx __ret = CreateRoom(__p_name, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Chat::NoResourcesAvailable& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::Chat::RoomAlreadyExist& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Chat::Server::___getRooms(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Chat::RoomList __ret = getRooms(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Chat::Server::___FindRoom(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    __is->read(__p_name);
    __inS.endReadParams();
    try
    {
        ::Chat::RoomPrx __ret = FindRoom(__p_name, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Chat::NoSuchRoomExist& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Chat::Server::___RegisterRoomFactory(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Chat::RoomFactoryPrx __p_factory;
    __is->read(__p_factory);
    __inS.endReadParams();
    RegisterRoomFactory(__p_factory, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Chat::Server::___UnregisterRoomFactory(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Chat::RoomFactoryPrx __p_factory;
    __is->read(__p_factory);
    __inS.endReadParams();
    UnregisterRoomFactory(__p_factory, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Chat__Server_all[] =
{
    "CreateRoom",
    "FindRoom",
    "RegisterRoomFactory",
    "UnregisterRoomFactory",
    "getRooms",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Chat::Server::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Chat__Server_all, __Chat__Server_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Chat__Server_all)
    {
        case 0:
        {
            return ___CreateRoom(in, current);
        }
        case 1:
        {
            return ___FindRoom(in, current);
        }
        case 2:
        {
            return ___RegisterRoomFactory(in, current);
        }
        case 3:
        {
            return ___UnregisterRoomFactory(in, current);
        }
        case 4:
        {
            return ___getRooms(in, current);
        }
        case 5:
        {
            return ___ice_id(in, current);
        }
        case 6:
        {
            return ___ice_ids(in, current);
        }
        case 7:
        {
            return ___ice_isA(in, current);
        }
        case 8:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Chat::Server::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Chat::Server::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Chat::__patch(ServerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Chat::ServerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Chat::Server::ice_staticId(), v);
    }
}

::Ice::Object* Chat::upCast(::Chat::Room* p) { return p; }

namespace
{
const ::std::string __Chat__Room_ids[2] =
{
    "::Chat::Room",
    "::Ice::Object"
};

}

bool
Chat::Room::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Chat__Room_ids, __Chat__Room_ids + 2, _s);
}

::std::vector< ::std::string>
Chat::Room::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Chat__Room_ids[0], &__Chat__Room_ids[2]);
}

const ::std::string&
Chat::Room::ice_id(const ::Ice::Current&) const
{
    return __Chat__Room_ids[0];
}

const ::std::string&
Chat::Room::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::Room";
    return typeId;
#else
    return __Chat__Room_ids[0];
#endif
}

::Ice::DispatchStatus
Chat::Room::___getName(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::std::string __ret = getName(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Chat::Room::___getUsers(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Chat::UserList __ret = getUsers(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Chat::Room::___AddUser(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Chat::UserPrx __p_who;
    ::std::string __p_password;
    __is->read(__p_who);
    __is->read(__p_password);
    __inS.endReadParams();
    try
    {
        AddUser(__p_who, __p_password, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Chat::UserAlreadyExists& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Chat::Room::___ChangePassword(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Chat::UserPrx __p_user;
    ::std::string __p_oldpassword;
    ::std::string __p_newpassword;
    __is->read(__p_user);
    __is->read(__p_oldpassword);
    __is->read(__p_newpassword);
    __inS.endReadParams();
    try
    {
        ChangePassword(__p_user, __p_oldpassword, __p_newpassword, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::Chat::NoSuchUserExist& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::Chat::WrongPassword& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
Chat::Room::___SendMessage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Chat::UserPrx __p_who;
    ::std::string __p_message;
    ::std::string __p_passwd;
    __is->read(__p_who);
    __is->read(__p_message);
    __is->read(__p_passwd);
    __inS.endReadParams();
    SendMessage(__p_who, __p_message, __p_passwd, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Chat::Room::___Destroy(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    Destroy(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Chat::Room::___LeaveRoom(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Chat::UserPrx __p_who;
    ::std::string __p_passwd;
    __is->read(__p_who);
    __is->read(__p_passwd);
    __inS.endReadParams();
    LeaveRoom(__p_who, __p_passwd, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Chat__Room_all[] =
{
    "AddUser",
    "ChangePassword",
    "Destroy",
    "LeaveRoom",
    "SendMessage",
    "getName",
    "getUsers",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Chat::Room::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Chat__Room_all, __Chat__Room_all + 11, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Chat__Room_all)
    {
        case 0:
        {
            return ___AddUser(in, current);
        }
        case 1:
        {
            return ___ChangePassword(in, current);
        }
        case 2:
        {
            return ___Destroy(in, current);
        }
        case 3:
        {
            return ___LeaveRoom(in, current);
        }
        case 4:
        {
            return ___SendMessage(in, current);
        }
        case 5:
        {
            return ___getName(in, current);
        }
        case 6:
        {
            return ___getUsers(in, current);
        }
        case 7:
        {
            return ___ice_id(in, current);
        }
        case 8:
        {
            return ___ice_ids(in, current);
        }
        case 9:
        {
            return ___ice_isA(in, current);
        }
        case 10:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Chat::Room::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Chat::Room::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Chat::__patch(RoomPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Chat::RoomPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Chat::Room::ice_staticId(), v);
    }
}

::Ice::Object* Chat::upCast(::Chat::RoomFactory* p) { return p; }

namespace
{
const ::std::string __Chat__RoomFactory_ids[2] =
{
    "::Chat::RoomFactory",
    "::Ice::Object"
};

}

bool
Chat::RoomFactory::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Chat__RoomFactory_ids, __Chat__RoomFactory_ids + 2, _s);
}

::std::vector< ::std::string>
Chat::RoomFactory::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Chat__RoomFactory_ids[0], &__Chat__RoomFactory_ids[2]);
}

const ::std::string&
Chat::RoomFactory::ice_id(const ::Ice::Current&) const
{
    return __Chat__RoomFactory_ids[0];
}

const ::std::string&
Chat::RoomFactory::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::Chat::RoomFactory";
    return typeId;
#else
    return __Chat__RoomFactory_ids[0];
#endif
}

::Ice::DispatchStatus
Chat::RoomFactory::___createRoom(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string __p_name;
    __is->read(__p_name);
    __inS.endReadParams();
    ::Chat::RoomPrx __ret = createRoom(__p_name, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Chat::RoomFactory::___getRooms(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Chat::RoomList __ret = getRooms(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Chat__RoomFactory_all[] =
{
    "createRoom",
    "getRooms",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Chat::RoomFactory::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Chat__RoomFactory_all, __Chat__RoomFactory_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Chat__RoomFactory_all)
    {
        case 0:
        {
            return ___createRoom(in, current);
        }
        case 1:
        {
            return ___getRooms(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Chat::RoomFactory::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Chat::RoomFactory::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
Chat::__patch(RoomFactoryPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Chat::RoomFactoryPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Chat::RoomFactory::ice_staticId(), v);
    }
}
